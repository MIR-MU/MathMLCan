<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<article>
  <articleinfo>
    <title>MathMLCan</title>
  </articleinfo>

  <section>
    <title>Introduction</title>

    <para>Goal of this project is to create an application in Java language which performs canonicalization of mathematical expressions written in <ulink url="http://www.w3.org/TR/MathML2/">MathML</ulink> (Mathematical Markup Language).
    </para>

    <para>The output should be canonical form of given MathML document. This canonicalized form of MathML can then be used for easy decision if two differently written MathML formulae represent the same expression, or by MathML search and comparison engines.
    </para>
  </section>

  <section>
    <title>Architecture</title>

    <para>The functionality of canonicalizer is divided into <link linkend="modules">modules</link>. MathMLCanonicalizer class can be initialized using XML configuration or manually by adding initialized modules or used with default settings stored in property files. Then it takes input stream with MathML document and produces canonicalized output stream. Class Settings provides static helper methods and loads global settings. MathMLCanonicalization is the runnable class connecting canonicalizer with command line and graphical interface.
    </para>
  </section>

  <section>
    <title>Contributors</title>

    <itemizedlist>
      <listitem><para>David Formánek</para></listitem>
      <listitem>
        <itemizedlist mark='opencircle'>
          <listitem><para>project leading</para></listitem>
          <listitem><para>architecture</para></listitem>
          <listitem><para>class for module testing and some tests</para></listitem>
          <listitem><para>MfencedReplacer tests and implementation</para></listitem>
        </itemizedlist>
      </listitem>

      <listitem><para>Jakub Adler</para></listitem>
      <listitem>
        <itemizedlist mark='opencircle'>
          <listitem><para>MrowNormalizer tests and implemntation</para></listitem>
        </itemizedlist>
      </listitem>

      <listitem><para>Jaroslav Dufek</para></listitem>
      <listitem>
        <itemizedlist mark='opencircle'>
          <listitem><para>OperatorNormalizer tests and implementation</para></listitem>
          <listitem><para>ScriptNormalizer tests and implementation</para></listitem>
        </itemizedlist>
      </listitem>

      <listitem><para>Robert Šiška</para></listitem>
      <listitem>
        <itemizedlist mark='opencircle'>
          <listitem><para>XML properties loading</para></listitem>
          <listitem><para>CLI and GUI</para></listitem>
          <listitem><para>ElementMinimizer</para></listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>
  </section>

  <section id="modules">
    <title>Modules</title>
    <para>Each module (a class implementing Module interface) is responsible for different area of MathML conanonicalization. In the present, there are two types of modules. Stream modules implement StreamModule interface and perform canonicalization directly on input stream. DOM modules implement DOMModule interface and process the document using Document Object Model, <ulink url="http://www.jdom.org/">JDOM2</ulink> Document have to be created before execution. AbstractModule allows loading default configuration from a property file. AbstractModuleTest provides easy way to test modules by comparing desired and real output using <ulink url="http://xmlunit.sourceforge.net/">XMLUnit</ulink>.
    </para>

    <section>
      <title>ElementMinimizer</title>
      <para></para>
    </section>

    <section>
      <title>MfencedReplacer</title>
      <para></para>
    </section>

    <section>
      <title>MrowNormalizer</title>
      <para></para>
    </section>
    <section>
      <title>OperatorNormalizer</title>
      <para></para>
    </section>

    <section>
      <title>ScriptNormalizer</title>
      <para></para>
    </section>

  </section>

  <section>
    <title>License</title>

    <para>MathMLCan's code is licensed under the terms of the Apache License, Version 2.0.</para>
  </section>
</article>
